# -*- coding: utf-8 -*-
"""Breast Cancer Classification..ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gGmm3qa1Ozv3AdwWCYdNpG4qyB8tqtba

Importing the Dependencies
"""

import numpy as np
import pandas as pd
import sklearn.datasets
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score
import warnings
warnings.filterwarnings("ignore")

"""Data Collection & Processing"""

# Loading the data from sklearn
breast_cancer_dataset = sklearn.datasets.load_breast_cancer()

print(breast_cancer_dataset)

# Loading the data to a data frame
data_frame = pd.DataFrame(breast_cancer_dataset.data, columns = breast_cancer_dataset.feature_names)

# Printing the first 5 rows
data_frame.head()

# Adding the 'target' column to the data frame
data_frame['label'] = breast_cancer_dataset.target

# Printing last 5 rows
data_frame.tail()

# Number of rows and columns in the dataset
data_frame.shape

data_frame.info()

# Checking for missing values
data_frame.isnull().sum()

# Statistical Measures
data_frame.describe()

# Checking the distribution of Target Varibale
data_frame['label'].value_counts()

"""1 --> Benign

0 --> Malignant
"""

data_frame.groupby('label').mean()

"""Separating the features and target"""

X = data_frame.drop(columns = 'label', axis = 1)
Y = data_frame['label']

print(X)

print(Y)

"""Splitting the data into training data & Testing data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training

Logistic Regression
"""

model = LogisticRegression()

# Training the Logistic Regression model using Training data

model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

# Accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)

print('Accuracy on training data = ', training_data_accuracy * 100)

# Accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print('Accuracy on test data = ', test_data_accuracy * 100)

X_train_prediction = model.predict(X_train)
test_predictions = model.predict(X_test)
# Calculate precision for training and test data
train_precision = precision_score(Y_train, X_train_prediction)
test_precision = precision_score(Y_test, X_test_prediction)

print('Precision on training data:', train_precision * 100)
print('Precision on test data:', test_precision * 100)

"""Model's Accuracy: 92.98 %
Model's Precision: 94.20 %

Building a Predictive System
"""

input_data = (13.54,14.36,87.46,566.3,0.09779,0.08129,0.06664,0.04781,0.1885,0.05766,0.2699,0.7886,2.058,23.56,0.008462,0.0146,0.02387,0.01315,0.0198,0.0023,15.11,19.26,99.7,711.2,0.144,0.1773,0.239,0.1288,0.2977,0.07259)

# Change the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# Reshape the numpy array as we are predicting for one datapoint
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == 0):
  print('The Breast cancer is Malignant')

else:
  print('The Breast Cancer is Benign')

