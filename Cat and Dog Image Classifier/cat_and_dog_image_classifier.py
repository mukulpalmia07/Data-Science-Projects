# -*- coding: utf-8 -*-
"""Cat and Dog Image Classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u6WcA6w-8iWDsXSOIRmiJsvY_YqdVuXC

# CAT AND DOG IMAGE CLASSIFIER
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d salader/dogs-vs-cats

import zipfile
zip_ref = zipfile.ZipFile('/content/dogs-vs-cats.zip', 'r')
zip_ref.extractall('/content')
zip_ref.close()

# Importing Dependencies
import tensorflow as tf
from tensorflow import keras
from keras import Sequential
from keras.layers import Dense, Conv2D, MaxPooling2D, Flatten
import matplotlib.pyplot as plt

# Keras generator
train_dataset = keras.utils.image_dataset_from_directory(
    directory = '/content/train',
    labels = 'inferred',
    label_mode = 'int',
    batch_size = 30,
    image_size = (256, 256)
)

validation_dataset = keras.utils.image_dataset_from_directory(
    directory = '/content/train',
    labels = 'inferred',
    label_mode = 'int',
    batch_size = 32,
    image_size = (256, 256)
)

# Normalizing
def process(image, label):
  image = tf.cast(image/255. , tf.float32)
  return image, label
train_dataset = train_dataset.map(process)
validation_dataset = validation_dataset.map(process)

# Creating CNN model
model = Sequential()
model.add(Conv2D(32, kernel_size = (3,3), padding = 'valid', activation = 'relu', input_shape = (256, 256, 3)))
model.add(MaxPooling2D(pool_size = (2,2), strides = 2, padding = 'valid'))
model.add(Conv2D(64, kernel_size = (3,3), padding = 'valid', activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2,2), strides = 2, padding = 'valid'))
model.add(Conv2D(128, kernel_size = (3,3), padding = 'valid', activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2,2), strides = 2, padding = 'valid'))
model.add(Flatten())
model.add(Dense(128, activation = 'relu'))
model.add(Dense(64, activation = 'relu'))
model.add(Dense(1, activation = 'sigmoid'))

model.summary()

# Compiling Model
model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

history = model.fit(train_dataset, epochs = 10, validation_data = validation_dataset)

# Getting graph of our model
plt.plot(history.history['accuracy'], color = 'red', label = 'train')
plt.plot(history.history['val_accuracy'], color = 'blue', label = 'validation')
plt.legend()
plt.show()

plt.plot(history.history['loss'], color = 'red', label = 'train')
plt.plot(history.history['val_loss'], color = 'blue', label = 'validation')
plt.legend()
plt.show()

"""### OBSERVATION

- The validation accuracy is increasing as the number of epochs increases, which means that the model is learning and improving. However, it is still lower than the training accuracy, which means that the model is still overfitting to the training data.

- The final validation accuracy achieved after 10 epochs is approximately 98.47%. This indicates that the model is able to correctly classify around 98.85% of the samples in the validation dataset.
"""

# Saving the model
model_path = '/content/cat_dog_classifier_model'
model.save(model_path)
print("Model saved successfully.")

import cv2
import matplotlib.pyplot as plt

# Load the test images
test_img1 = cv2.imread('/content/dogg.jpg')
cat_image = cv2.imread('/content/cat.jpg')

plt.imshow(test_img1)
plt.title("Test Image 1 (Dog)")
plt.show()

test_img1 = cv2.resize(test_img1, (256, 256))
test_img1 = test_img1.astype(float) / 255.0
input_image1 = test_img1.reshape((1, 256, 256, 3))

prediction1 = model.predict(input_image1)

threshold = 0.5
if prediction1 >= threshold:
    print("Test Image 1 (Dog) Prediction: Dog")
else:
    print("Test Image 1 (Dog) Prediction: Cat")

plt.imshow(cat_image)
plt.title("Test Image 2 (Cat)")
plt.show()

cat_image = cv2.resize(cat_image, (256, 256))
cat_image = cat_image.astype(float) / 255.0
input_image2 = cat_image.reshape((1, 256, 256, 3))

prediction2 = model.predict(input_image2)

if prediction2 >= threshold:
    print("Test Image 2 (Cat) Prediction: Dog")
else:
    print("Test Image 2 (Cat) Prediction: Cat")

"""## OBSERVATION

- The model performs well in classifying cat and dog images, achieving a high accuracy of around 98.85% on the validation set.
- However, some overfitting is observed, indicating the need for regularization techniques like dropout or data augmentation to improve generalization.
- The trained model is saved for future use.
- Predictions on new images (one cat and one dog image) are made using the trained model, demonstrating its applicability.
"""

